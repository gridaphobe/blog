<?xml version="1.0" encoding="utf-8" ?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Eric Seidel</title><link rel="self" href="http://eseidel.org/feed" /><link href="http://eseidel.org/" /><updated>2014-12-04T05:00:00Z</updated><id>tag:gridaphobe.blog,2012:</id><author><name>Eric Seidel</name><email>gridaphobe@gmail.com</email></author><entry><title>(Ab)using Compiler Plugins to Improve Embedded DSLs</title><link href="http://eseidel.org/posts/abusing-compiler-plugins" /><published>2014-12-04T05:00:00Z</published><updated>2014-12-04T05:00:00Z</updated><id>tag:gridaphobe.blog,2012:abusing-compiler-plugins</id><content type="html">&lt;p&gt;&lt;em&gt;This is cross-posted from the &lt;a href=&quot;http://galois.com/blog/2014/12/abusing-compiler-plugins-improve-embedded-dsls/&quot;&gt;Galois&lt;/a&gt; blog, where I'm currently finishing an internship.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Embedded DSLs are a bit of a double-edged sword. They have a low start-up cost because you can defer a lot of work to the host language, but producing good error messages can be challenging. People often talk about the quality of &lt;em&gt;type errors&lt;/em&gt; produced by the host language, but I'm going to focus instead on producing better &lt;em&gt;runtime errors&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;a-simple-toy-language&quot;&gt;A Simple Toy Language&lt;/h2&gt;
&lt;p&gt;Here's a fragment of a simple imperative language.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lit&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;
         &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;
         &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)

&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;
          &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lit&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lit&lt;/span&gt;
          &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Eq&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Expr&lt;/span&gt;
          &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lt&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Expr&lt;/span&gt;
          &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Expr&lt;/span&gt;
          &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)

&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Stmt&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Assign&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Expr&lt;/span&gt;
          &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;While&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Expr&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Stmt&lt;/span&gt;]
          &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Assert&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Expr&lt;/span&gt;
          &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With judicious use of smart constructors, we can build a nice embedded DSL for our language, turning&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;ot&quot;&gt;sum10 ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Imp&lt;/span&gt; ()
sum10 &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;
  n &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; local &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
  r &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; local &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
  while (n &lt;span class=&quot;fu&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;fu&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;
    r &lt;span class=&quot;fu&quot;&gt;=:&lt;/span&gt; r &lt;span class=&quot;fu&quot;&gt;+&lt;/span&gt; n
    n &lt;span class=&quot;fu&quot;&gt;=:&lt;/span&gt; n &lt;span class=&quot;fu&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
  assert (r &lt;span class=&quot;fu&quot;&gt;=?&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;54&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;into&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;λ&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt; runImp sum10
[ &lt;span class=&quot;dt&quot;&gt;Assign&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;local0&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Lit&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;))
, &lt;span class=&quot;dt&quot;&gt;Assign&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;local1&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Lit&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;))
, &lt;span class=&quot;dt&quot;&gt;While&lt;/span&gt;
    (&lt;span class=&quot;dt&quot;&gt;Lt&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;local0&amp;quot;&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;Lit&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;)))
    [ &lt;span class=&quot;dt&quot;&gt;Assign&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;local1&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Add&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;local1&amp;quot;&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;local0&amp;quot;&lt;/span&gt;))
    , &lt;span class=&quot;dt&quot;&gt;Assign&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;local0&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Add&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;local0&amp;quot;&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;Lit&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)))
    ]
, &lt;span class=&quot;dt&quot;&gt;Assert&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Eq&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;local1&amp;quot;&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;Lit&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;54&lt;/span&gt;)))
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But when we actually run the program, we get&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;λ&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt; eval &lt;span class=&quot;fu&quot;&gt;$&lt;/span&gt; runImp sum10
&lt;span class=&quot;fu&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; assertion failed&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Eq&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;local1&amp;quot;&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;Lit&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;54&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which is not so great. I like my error messages to include a source location so I know where to start looking. Unfortunately there's no way for a Haskell function to know where it was called, and for good reason as that would destroy purity.&lt;/p&gt;
&lt;p&gt;As an alternative, we could use a pre-processor to transform the original Haskell code by adding explicit references to the source locations. But that's a bit unsatisfactory because now the code we write is no longer the same code GHC sees, which means that errors thrown by GHC will refer to incorrect locations. Luckily for us, GHC includes support for &lt;em&gt;compiler plugins&lt;/em&gt; so users can implement their own optimization passes. So, today we're going to implement an optimization pass that optimizes usability rather than performance.&lt;/p&gt;
&lt;h2 id=&quot;strategy&quot;&gt;Strategy&lt;/h2&gt;
&lt;p&gt;GHC allows users to write optimization passes over &lt;a href=&quot;https://downloads.haskell.org/~ghc/latest/docs/html/libraries/ghc/CoreSyn.html#t:Expr&quot;&gt;Core&lt;/a&gt;, the first of a few intermediate representations used by GHC. Core is a simple language with just a handful of data constructors, essentially&lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Var&lt;/span&gt;	  &lt;span class=&quot;dt&quot;&gt;Id&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lit&lt;/span&gt;   &lt;span class=&quot;dt&quot;&gt;Literal&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;App&lt;/span&gt;   &lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lam&lt;/span&gt;   &lt;span class=&quot;dt&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Let&lt;/span&gt;   &lt;span class=&quot;dt&quot;&gt;CoreBind&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Case&lt;/span&gt;  &lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt; [(&lt;span class=&quot;dt&quot;&gt;AltCon&lt;/span&gt;, [&lt;span class=&quot;dt&quot;&gt;Id&lt;/span&gt;], &lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt;)]
  &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;  &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tick&lt;/span&gt;  &lt;span class=&quot;dt&quot;&gt;Tickish&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This makes our life a whole lot easier since we don't have to consider the entire surface area of Haskell's syntax when we write our plugin.&lt;/p&gt;
&lt;p&gt;Our goal is to write a Core transformation that will insert calls to a &lt;code&gt;setLocation&lt;/code&gt; action in our monadic DSL, transforming the original Haskell code into something like&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;ot&quot;&gt;sum10 ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Imp&lt;/span&gt; ()
sum10 &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;
  setLocation &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;line &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt;
  n &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; local &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
  setLocation &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;line &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt;
  r &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; local &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
  setLocation &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;line &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt;
  while (n &lt;span class=&quot;fu&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;fu&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;
    setLocation &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;line &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt;
    r &lt;span class=&quot;fu&quot;&gt;=:&lt;/span&gt; r &lt;span class=&quot;fu&quot;&gt;+&lt;/span&gt; n
    setLocation &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;line &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt;
    n &lt;span class=&quot;fu&quot;&gt;=:&lt;/span&gt; n &lt;span class=&quot;fu&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
  setLocation &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;line &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt;
  assert (r &lt;span class=&quot;fu&quot;&gt;=?&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;54&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This isn't perfect as our language will only know about source locations with statement-level granularity, but the upside is that the changes to the language are minimal. We can just add another &lt;code&gt;Stmt&lt;/code&gt; constructor that tells the interpreter to update the current location.&lt;/p&gt;
&lt;p&gt;To write this transformation we need to know three things:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Where to insert the annotations?&lt;/li&gt;
&lt;li&gt;How to insert the annotations?&lt;/li&gt;
&lt;li&gt;How to get the source locations from GHC?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;useful-api-functions&quot;&gt;Useful API Functions&lt;/h2&gt;
&lt;p&gt;GHC is written as a library with a vast API, so let's first pick out and describe a few functions that we'll need to use. I'm going to take some artistic license with the types of these API functions in order to hide some of the necessary plumbing. I will also use angle brackets (e.g. &lt;code&gt;&amp;lt;Imp&amp;gt;&lt;/code&gt;) to refer to specific &lt;code&gt;Type&lt;/code&gt; and &lt;code&gt;CoreExpr&lt;/code&gt; values. A complete and running version of the plugin can be found &lt;a href=&quot;https://github.com/GaloisInc/ghc-srcspan-plugin/blob/master/examples/ImpPluginExplicit.hs&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;deconstructing-expressions-and-types&quot;&gt;Deconstructing Expressions and Types&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;ot&quot;&gt;exprType            ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;splitTyConApp_maybe ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;TyCon&lt;/span&gt;, [&lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;exprType&lt;/code&gt; queries an expression for its type. &lt;code&gt;splitTyConApp_maybe&lt;/code&gt; attempts to split a type into a type constructor and its arguments, e.g.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;splitTyConApp_maybe &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Imp&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Imp&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt;, [&lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt;])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;building-core-expressions&quot;&gt;Building Core Expressions&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;ot&quot;&gt;mkCoreApps   ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;mkStringExpr ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;mkIntExpr    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;mkCoreApps&lt;/code&gt; constructs a sequence of nested applications, e.g.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;mkCoreApps &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;map&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt; [&lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;f&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;xs&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt;] &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;App&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;map&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;f&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt;) &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;xs&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;mkStringExpr&lt;/code&gt; and &lt;code&gt;mkIntExpr&lt;/code&gt; construct expressions corresponding to &lt;code&gt;String&lt;/code&gt; (resp. &lt;code&gt;Integer&lt;/code&gt;) literals.&lt;/p&gt;
&lt;h3 id=&quot;library-functions-from-our-dsl&quot;&gt;Library functions from our DSL&lt;/h3&gt;
&lt;p&gt;We'll also need to define two more functions in our DSL for our code-generator to target.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;ot&quot;&gt;makeLocation ::&lt;/span&gt; FilePath
             &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;-- the starting line/column&lt;/span&gt;
             &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;-- the ending line/column&lt;/span&gt;
             &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ImpSrcSpan&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;setLocation  ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ImpSrcSpan&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Imp&lt;/span&gt; ()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;setLocation&lt;/code&gt; just emits a new statement in our DSL that contains the current source location, e.g.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Stmt&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;...&lt;/span&gt;
          &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;SetLocation&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ImpSrcSpan&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I'm also using a new &lt;code&gt;ImpSrcSpan&lt;/code&gt; type rather than GHC's &lt;code&gt;SrcSpan&lt;/code&gt; to emphasize that we can't just embed the &lt;code&gt;SrcSpan&lt;/code&gt; value directly, we have to reconstruct it at run-time.&lt;/p&gt;
&lt;h2 id=&quot;finding-interesting-expressions&quot;&gt;Finding interesting expressions&lt;/h2&gt;
&lt;p&gt;Since our goal is locations with statement-level granularity, we'll consider any expression with type &lt;code&gt;Imp a&lt;/code&gt; interesting. Encoding this as a predicate on Core expressions is straightforward, we'll just use &lt;code&gt;splitTyConApp_maybe&lt;/code&gt; and check if the type constructor is &lt;code&gt;Imp&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;ot&quot;&gt;isInteresting ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;
isInteresting expr
  &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; (tc, _) &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; splitTyConApp_maybe (exprType expr)
  &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; tc &lt;span class=&quot;fu&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Imp&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; otherwise
  &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- `splitTyConApp_maybe` attempts to split a `Type` into a pair of a type constructor and its arguments. If it succeeds we just need to check if the type constructor is `Imp`, otherwise we can safely ignore the expression. --&gt;
&lt;h2 id=&quot;adding-the-locations&quot;&gt;Adding the locations&lt;/h2&gt;
&lt;p&gt;Once we've found an interesting expression, we'll need to annotate it with a source location according to our scheme above. So we need a function&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;ot&quot;&gt;annotate ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;SrcSpan&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;that transforms &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; into &lt;code&gt;(&amp;gt;&amp;gt;) (setLocation &amp;lt;loc&amp;gt;) &amp;lt;expr&amp;gt;&lt;/code&gt;. This turns out to be harder than it looks though! Core doesn't have type-classes -- it passes the dictionaries around explicitly -- which means we need to somehow dig up the &lt;code&gt;Monad&lt;/code&gt; dictionary for &lt;code&gt;Imp&lt;/code&gt;. Rather than deal with looking up type-class dictionaries, let's take a slightly different approach and rewrite &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; to &lt;code&gt;withLocation &amp;lt;loc&amp;gt; &amp;lt;expr&amp;gt;&lt;/code&gt;, where&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;ot&quot;&gt;withLocation ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ImpSrcSpan&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Imp&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Imp&lt;/span&gt; a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is a new monadic action in our DSL. Now our target code will look something like&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;ot&quot;&gt;sum10 ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Imp&lt;/span&gt; ()
sum10 &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;
  n &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; withLocation &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;line &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt; (local &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
  r &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; withLocation &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;line &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt; (local &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
  withLocation &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;line &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;$&lt;/span&gt; while (n &lt;span class=&quot;fu&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;fu&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;
    r &lt;span class=&quot;fu&quot;&gt;=:&lt;/span&gt; withLocation &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;line &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt; (r &lt;span class=&quot;fu&quot;&gt;+&lt;/span&gt; n)
    n &lt;span class=&quot;fu&quot;&gt;=:&lt;/span&gt; withLocation &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;line &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt; (n &lt;span class=&quot;fu&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)
  withLocation &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;line &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt; (assert (r &lt;span class=&quot;fu&quot;&gt;=?&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;54&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- The next problem is that we can't simply embed the `SrcSpan` that GHC is carrying around into the Core as a literal. We have to instead translate the `SrcSpan` into a `CoreExpr` ourselves. We'll add another function to our DSL --&gt;
&lt;!-- ```haskell --&gt;
&lt;!-- ``` --&gt;
&lt;!-- and write a function to translate a `SrcSpan` into a `CoreExpr` that corresponds to an application of `makeLocation` to the components of the `SrcSpan`. --&gt;
&lt;p&gt;As mentioned above, we can't just embed a &lt;code&gt;SrcSpan&lt;/code&gt; in the Core, so we'll define a quick helper function that will build a call to &lt;code&gt;makeLocation&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;ot&quot;&gt;mkLocExpr ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;SrcSpan&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt;
mkLocExpr src &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;
  mkCoreApps (&lt;span class=&quot;dt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;makeLocation&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt;)
             [ mkStringExpr (srcSpanFile src)
             , mkIntExpr (srcSpanStartLine src)
             , mkIntExpr (srcSpanStartCol src)
             , mkIntExpr (srcSpanEndLine src)
             , mkIntExpr (srcSpanEndCol src)
             ]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- Core is explicitly typed, so we have to instantiate `withLocation`s type parameter ourselves based on `expr`s type. --&gt;
&lt;p&gt;Core is explicitly typed, so when we generate the call to &lt;code&gt;withLocation&lt;/code&gt; inside &lt;code&gt;annotate&lt;/code&gt;, we have to take care to instantiate &lt;code&gt;withLocation&lt;/code&gt;s type parameter correctly.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;ot&quot;&gt;annotate ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;SrcSpan&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt;
annotate src expr &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;
  mkCoreApps (&lt;span class=&quot;dt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt;withLocation&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt;) &lt;span class=&quot;fu&quot;&gt;$&lt;/span&gt; map &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt; tys &lt;span class=&quot;fu&quot;&gt;++&lt;/span&gt; [mkLocExpr src, expr]
  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; (_, tys) &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; splitTyConApp_maybe &lt;span class=&quot;fu&quot;&gt;$&lt;/span&gt; exprType expr&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;getting-the-locations&quot;&gt;Getting the locations&lt;/h2&gt;
&lt;p&gt;I've ignored a somewhat crucial detail so far: GHC strips away the source locations as part of the translation from Haskell to Core! Well, it normally does that anyway... If you load your module into GHCi, or compile with profiling or hpc enabled, GHC will insert &lt;code&gt;Tick&lt;/code&gt;s in the Core, which contain source locations among other things.&lt;/p&gt;
&lt;p&gt;So we need a function&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;ot&quot;&gt;tickSpan ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tickish&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;SrcSpan&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to extract the &lt;code&gt;SrcSpan&lt;/code&gt;. I won't present the implementation here because, frankly, it's just a bunch of plumbing.&lt;/p&gt;
&lt;h2 id=&quot;tying-it-all-together&quot;&gt;Tying it all together&lt;/h2&gt;
&lt;p&gt;The last piece of the puzzle is the actual expression transformer, which just needs to traverse the &lt;code&gt;CoreExpr&lt;/code&gt;s, track the most recent valid &lt;code&gt;SrcSpan&lt;/code&gt;, and annotate the interesting expressions.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;ot&quot;&gt;addLocationsExpr ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreExpr&lt;/span&gt;
addLocationsExpr &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; go noSrcSpan
  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;
  go ss (&lt;span class=&quot;dt&quot;&gt;Tick&lt;/span&gt; t expr) 
    &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; isGoodSrcSpan (tickSpan t)
    &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tick&lt;/span&gt; t (go (tickSpan t) expr)
    &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; otherwise
    &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tick&lt;/span&gt; t (go ss expr)
  go ss e&lt;span class=&quot;fu&quot;&gt;@&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;App&lt;/span&gt; expr arg) 
    &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; isInteresting e
    &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; annotate ss (&lt;span class=&quot;dt&quot;&gt;App&lt;/span&gt; (go ss expr) (go ss arg))
    &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; otherwise
    &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;App&lt;/span&gt; (go ss expr) (go ss arg)
  go ss (&lt;span class=&quot;dt&quot;&gt;Lam&lt;/span&gt; x expr)
    &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lam&lt;/span&gt; x (go ss expr)
  go ss (&lt;span class=&quot;dt&quot;&gt;Let&lt;/span&gt; bndr expr)
    &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Let&lt;/span&gt; (addLocationsBind bndr) (go ss expr)
  go ss (&lt;span class=&quot;dt&quot;&gt;Case&lt;/span&gt; expr x t alts)
    &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Case&lt;/span&gt; (go ss expr) x t (mapM (addLocationsAlt ss) alts)
  go _  expr
    &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; expr

  addLocationsAlt ss (c, xs, expr)
    &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; (c, xs, go ss expr)

&lt;span class=&quot;ot&quot;&gt;addLocationsBind ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreBind&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreBind&lt;/span&gt;
addLocationsBind (&lt;span class=&quot;dt&quot;&gt;NonRec&lt;/span&gt; b expr)
  &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;NonRec&lt;/span&gt; b (addLocationsExpr expr)
addLocationsBind (&lt;span class=&quot;dt&quot;&gt;Rec&lt;/span&gt; binds)
  &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Rec&lt;/span&gt; [(b, addLocationsExpr expr) &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; (b, expr) &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; binds]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can hook our pass into GHC as a plugin with the following wrapper&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;kw&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ImpPlugin&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import &lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;GhcPlugins&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import &lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Imp&lt;/span&gt;

&lt;span class=&quot;ot&quot;&gt;plugin ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Plugin&lt;/span&gt;
plugin &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; defaultPlugin { installCoreToDos &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; install }

&lt;span class=&quot;ot&quot;&gt;install ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;CommandLineOption&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;CoreToDo&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreM&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;CoreToDo&lt;/span&gt;]
install opts todos &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;
  reinitializeGlobals   &lt;span class=&quot;co&quot;&gt;-- GHC requires it, just do it&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; mypass &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CoreDoPluginPass&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Add Locations&amp;quot;&lt;/span&gt;
               (bindsOnlyPass (return &lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt; map addLocationsBind))
  return mypass &lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; todos&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and enable it at compile-time with &lt;code&gt;-fplugin=ImpPlugin&lt;/code&gt;. Here are the results of all our hard work&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;λ&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt; runImp sum10
[ &lt;span class=&quot;dt&quot;&gt;SetLocation&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;ImpDemo.hs:(9,9)-(17,19)&amp;quot;&lt;/span&gt;
, &lt;span class=&quot;dt&quot;&gt;SetLocation&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;ImpDemo.hs:(12,3)-(12,9)&amp;quot;&lt;/span&gt;
, &lt;span class=&quot;dt&quot;&gt;Assign&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;local0&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Lit&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;))
, &lt;span class=&quot;dt&quot;&gt;SetLocation&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;ImpDemo.hs:(9,9)-(17,19)&amp;quot;&lt;/span&gt;
, &lt;span class=&quot;dt&quot;&gt;SetLocation&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;ImpDemo.hs:(13,3)-(13,9)&amp;quot;&lt;/span&gt;
, &lt;span class=&quot;dt&quot;&gt;Assign&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;local1&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Lit&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;))
, &lt;span class=&quot;dt&quot;&gt;SetLocation&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;ImpDemo.hs:(9,9)-(17,19)&amp;quot;&lt;/span&gt;
, &lt;span class=&quot;dt&quot;&gt;SetLocation&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;ImpDemo.hs:(14,3)-(16,15)&amp;quot;&lt;/span&gt;
, &lt;span class=&quot;dt&quot;&gt;While&lt;/span&gt;
    (&lt;span class=&quot;dt&quot;&gt;Lt&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;local0&amp;quot;&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;Lit&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;)))
    [ &lt;span class=&quot;dt&quot;&gt;SetLocation&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;ImpDemo.hs:(14,3)-(16,15)&amp;quot;&lt;/span&gt;
    , &lt;span class=&quot;dt&quot;&gt;SetLocation&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;ImpDemo.hs:(15,5)-(15,15)&amp;quot;&lt;/span&gt;
    , &lt;span class=&quot;dt&quot;&gt;Assign&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;local1&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Add&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;local1&amp;quot;&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;local0&amp;quot;&lt;/span&gt;))
    , &lt;span class=&quot;dt&quot;&gt;SetLocation&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;ImpDemo.hs:(16,5)-(16,15)&amp;quot;&lt;/span&gt;
    , &lt;span class=&quot;dt&quot;&gt;Assign&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;local0&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Add&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;local0&amp;quot;&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;Lit&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)))
    ]
, &lt;span class=&quot;dt&quot;&gt;SetLocation&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;ImpDemo.hs:(17,3)-(17,19)&amp;quot;&lt;/span&gt;
, &lt;span class=&quot;dt&quot;&gt;Assert&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Eq&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;local1&amp;quot;&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;Lit&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;54&lt;/span&gt;)))
]

λ&lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt; eval &lt;span class=&quot;fu&quot;&gt;$&lt;/span&gt; runImp sum10
&lt;span class=&quot;fu&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;ImpDemo.hs:(17,3)-(17,19)&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; assertion failed&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Eq&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;local1&amp;quot;&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;Lit&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;54&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wonderful!&lt;/p&gt;
&lt;p&gt;You may have noticed that the only pieces of the plugin that were actually specific to &lt;code&gt;Imp&lt;/code&gt; were finding interesting expressions and annotating them with source locations. So I've extracted the rest into a generic &lt;a href=&quot;http://hackage.haskell.org/package/ghc-srcspan-plugin&quot;&gt;pass&lt;/a&gt; that you can re-use. In fact we're already using this plugin in the &lt;a href=&quot;https://github.com/GaloisInc/ivory/blob/master/ivory/src/Ivory/Language/Plugin.hs&quot;&gt;Ivory&lt;/a&gt; language for writing safe embedded systems.&lt;/p&gt;
&lt;p&gt;As a final note, I don't claim to have invented anything conceptually new here, both &lt;a href=&quot;http://lampwww.epfl.ch/~amin/pub/hosc2013.pdf&quot;&gt;Scala&lt;/a&gt; and &lt;a href=&quot;http://www.davidchristiansen.dk/2014/12/03/filling-out-source-locations-in-idris/&quot;&gt;Idris&lt;/a&gt; support reifying source locations in a much more principled manner than what I've presented. It would also be nice if GHC had similar support, perhaps via the &lt;code&gt;ImplicitParams&lt;/code&gt; extension. But I do believe this is a nice solution that you can use today!&lt;/p&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;The actual definition has two extra constructors and a type parameter which I've instantiated with &lt;code&gt;Id&lt;/code&gt;, but this is not particularly relevant to our use-case.&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</content></entry><entry><title>Fixing My Feed</title><link href="http://eseidel.org/posts/fixing-my-feed" /><published>2012-07-06T00:03:00Z</published><updated>2012-07-06T00:03:00Z</updated><id>tag:gridaphobe.blog,2012:fixing-my-feed</id><content type="html">&lt;p&gt;If you use Google Reader to subscribe to my blog, you may have noticed that the feed has been acting a bit crazy over the past few weeks, with an increasing number of duplicate posts. Sorry about that, I was rewriting my site in Haskell (using the &lt;a href=&quot;http://snapframework.com/&quot;&gt;Snap Framework&lt;/a&gt;) and royally screwed up migrating the feed. Since there's no apparent way to reset one's feed on Google Reader, I've had to change my feed's URL to &lt;a href=&quot;http://eseidel.org/feed&quot; class=&quot;uri&quot;&gt;http://eseidel.org/feed&lt;/a&gt;. Please update your subscription accordingly.&lt;/p&gt;
&lt;p&gt;You'll notice now that Google Reader claims all my posts were published at the same time today... I've double-checked that the feed (and timestamps) are valid, it must just be a bug in Google Reader...&lt;/p&gt;</content></entry><entry><title>On the Benefits of a Strong Type System</title><link href="http://eseidel.org/posts/strong-type-systems" /><published>2012-06-21T05:00:00Z</published><updated>2012-06-21T05:00:00Z</updated><id>tag:gridaphobe.blog,2012:strong-type-systems</id><content type="html">&lt;p&gt;The other day I encountered a nasty bug (of my own making of course) at Fluidinfo, where I work part-time. At Fluidinfo we're trying to make the world writeable by allowing you to add bits of data, which we call Tags, to anything. So anyway, I wrote some code to remove a dataset I had imported last year that's taking up a lot of space but has no users. We use Python at Fluidinfo, so the code looked something like this&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;tagIds &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# get the list of tags to delete&lt;/span&gt;
store.find(TagValue, TagValue.&lt;span class=&quot;bu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; tagIds).remove()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That code is supposed to take a list of Tags and then remove all of their instances, simple enough right? Except of course that's not what it would have done, had I actually run it. The code would have removed all the tag-instances that shared an ID (in this case an Int as you might expect) with any of the Tag objects. That's bad, really bad... Particularly bad because it's entirely possible that the tag-instances that would have actually been deleted might not have been instances of the Tags I wanted to delete. What I &lt;em&gt;wanted&lt;/em&gt; to say was&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;tagIds &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# get the list of tags to delete&lt;/span&gt;
store.find(TagValue, TagValue.tagId &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; tagIds).remove()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Luckily my mistake was caught during code review and it was never executed! It could have easily slipped through though, only 3 characters differ between the correct line and disaster.&lt;/p&gt;
&lt;p&gt;This incident got me thinking, how can we prevent mistakes like that from even reaching code review? In Python, as in many other dynamically-typed languages, the standard answer is unit tests. Make sure every path through the code is tested, and you can be substantially more confident that your code is correct. I won't argue that tests aren't important, but I'm not satisfied by that answer in this case. Why should I have to write a test for that? I can't think of a reasonable scenario where I would want to delete rows in a table because their primary key happened to be the same as the primary key of an item in a completely different table, can you?&lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I'd rather have the language come back and tell me that what I'm trying to do doesn't make the least bit of sense. Luckily some languages can do exactly that!&lt;/p&gt;
&lt;h2 id=&quot;enter-haskell&quot;&gt;Enter Haskell&lt;/h2&gt;
&lt;p&gt;Haskell is a pure functional language that I've been playing around with quite a bit lately. I even wrote my compiler for last semester's Compilers course in Haskell, which I might write about at some point. So how does Haskell help us solve my problem? Well, Haskell is strongly, statically typed, so I just define new types to represent &lt;code&gt;TagId&lt;/code&gt;s and &lt;code&gt;TagValueId&lt;/code&gt;s.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode literate literatehaskell&quot;&gt;&lt;code class=&quot;sourceCode literatehaskell&quot;&gt;&lt;span class=&quot;ot&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TagId&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TagId&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)
&lt;span class=&quot;ot&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TagValueId&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TagValueId&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you're not familiar with Haskell, don't worry about the &lt;code&gt;deriving (Show)&lt;/code&gt; bit, that just tells Haskell I'd like to be able to print these types out in the REPL. This post is a Literate Haskell file, so you can actually &lt;a href=&quot;/posts/strong-type-systems.lhs&quot;&gt;download it&lt;/a&gt;, load it into &lt;code&gt;ghci&lt;/code&gt; and play around if you feel so inclined. The important part is&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TagId&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TagId&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which just says that I'm creating a brand new type called &lt;code&gt;TagId&lt;/code&gt;, and it's really just a wrapped-up integer. What does this buy me? Well, now the typechecker knows about two new types and will treat them as &lt;strong&gt;distinct&lt;/strong&gt; from other integer-based types. Here's a simple function that operates on &lt;code&gt;TagId&lt;/code&gt;s&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode literate literatehaskell&quot;&gt;&lt;code class=&quot;sourceCode literatehaskell&quot;&gt;&lt;span class=&quot;ot&quot;&gt;&amp;gt;&lt;/span&gt; nextTagId (&lt;span class=&quot;dt&quot;&gt;TagId&lt;/span&gt; x) &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TagId&lt;/span&gt; (x &lt;span class=&quot;fu&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nothing too special here, we're just taking one &lt;code&gt;TagId&lt;/code&gt; and returning a new one with the wrapped integer incremented, might be useful for assigning IDs to new Tags. Let's see how it works.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ghci&amp;gt; nextTagId (TagId 2)
TagId 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Who'd have thought?! What if I try to give it a plain old integer?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ghci&amp;gt; nextTagId 2

&amp;lt;interactive&amp;gt;:6:11:
    No instance for (Num TagId)
      arising from the literal `2&amp;#39; ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well this error message isn't that helpful, but it does tell us that a &lt;code&gt;TagId&lt;/code&gt; cannot be used interchangably with an integer. Good to know, but not exaclty what we're here for. What if I pass in a &lt;code&gt;TagValueId&lt;/code&gt;, which is implemented exactly like &lt;code&gt;TagId&lt;/code&gt;?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ghci&amp;gt; nextTagId (TagValueId 2)

&amp;lt;interactive&amp;gt;:7:12:
    Couldn&amp;#39;t match expected type `TagId&amp;#39; with actual type `TagValueId&amp;#39;
    In the return type of a call of `TagValueId&amp;#39;
    In the first argument of `nextTagId&amp;#39;, namely `(TagValueId 2)&amp;#39;
    In the expression: nextTagId (TagValueId 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Awesome! Not only does GHC tell us that we're not allowed to pass in a &lt;code&gt;TagValueId&lt;/code&gt;, it also tells us that we probably meant to pass in a &lt;code&gt;TagId&lt;/code&gt;. End of post, right? Not exactly...&lt;/p&gt;
&lt;h2 id=&quot;why-haskell&quot;&gt;Why Haskell?&lt;/h2&gt;
&lt;p&gt;By now you're probably wondering, &amp;quot;What's so special about Haskell? I can do the same thing in Java or [insert strongly-, statically-typed language here].&amp;quot; And you certainly can, here's an example of the &lt;code&gt;TagId&lt;/code&gt; type in Java.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode java&quot;&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; TagId {
    &lt;span class=&quot;fu&quot;&gt;TagId&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; _i) { i = _i; }
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() { &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; i; }
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I could smugly point out that my Haskell code is a whole 4 lines shorter than the Java code, but let's face it, they both work just fine. So where's the difference?&lt;/p&gt;
&lt;p&gt;You might not want to use the Java code because it boxes up the integer and allocates space on the heap, when you could have just used a primitive int. That seems like a trivial concern, but if you suddenly have to deal with millions of these &lt;code&gt;TagId&lt;/code&gt;s, it could quickly become a real concern.&lt;/p&gt;
&lt;p&gt;But wait, doesn't the Haskell code do the same thing? No, it does not. Here's the really cool thing about the &lt;code&gt;newtype&lt;/code&gt; definition in Haskell. Since it is restricted to simple &amp;quot;wrappers&amp;quot; like a &lt;code&gt;TagId&lt;/code&gt;, Haskell can actually prove that the &lt;code&gt;TagId&lt;/code&gt; is never accidentally used as something else, and then throw away everything except the wrapped-up integer. Let me repeat that, &lt;code&gt;TagId&lt;/code&gt; and &lt;code&gt;TagValueId&lt;/code&gt; &lt;strong&gt;only exist at compile-time&lt;/strong&gt;. At run-time they are both just integers, indistinguishable from one another, or any other &amp;quot;primitive&amp;quot; integer for that matter. But that's fine because the compiler has proved that we are using them correctly.&lt;/p&gt;
&lt;p&gt;That's pretty damn cool if you ask me.&lt;/p&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;Some of you may rightly consider this hyperbole because you'd actually write a test to see if the code deleted the correct &lt;code&gt;TagValue&lt;/code&gt;s. That's very true, but it's easy to construct a test-case that would give you a false positive: start with a fresh DB, create one Tag and one instance of that Tag. Both will have an ID of 1 and the test will pass, but not because the code is correct.&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</content></entry><entry><title>Fluidinfo Developer Competition</title><link href="http://eseidel.org/posts/fluidinfo-oreilly-competition" /><published>2011-04-05T22:52:17Z</published><updated>2011-04-05T22:52:17Z</updated><id>tag:gridaphobe.blog,2012:fluidinfo-oreilly-competition</id><content type="html">&lt;p&gt;I've finally had time to work on something for the &lt;a href=&quot;http://radar.oreilly.com/2011/03/api-competition.html&quot;&gt;Fluidinfo &amp;amp; O'Reilly API Competition&lt;/a&gt;, which ends this weekend. The guys at &lt;a href=&quot;http://fluidinfo.com&quot;&gt;Fluidinfo&lt;/a&gt; recently imported tons of metadata about &lt;a href=&quot;http://oreilly.com/&quot;&gt;O'Reilly Books&lt;/a&gt; and they want to see how people will use it. My idea is to integrate the data with my Resumé project, &lt;a href=&quot;http://fluid-cv.appspot.com&quot;&gt;FluidCV&lt;/a&gt;. FluidCV has been missing a skills section for a while since I haven't had time to work on it between school, internships, etc. So, instead of a traditional (boring?) list of skills, why not list O'Reilly books that match my skills.&lt;/p&gt;
&lt;p&gt;What I did was tag a few books about Python, Perl, Unix, and Git with &lt;code&gt;gridaphobe/skill&lt;/code&gt;. Then I told FluidCV to find the books I had tagged, and retrieve the &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;homepage&lt;/code&gt;, and &lt;code&gt;cover-small&lt;/code&gt; tags under the &lt;code&gt;oreilly.com&lt;/code&gt; namespace. This way I can construct a nice group of book-covers (with on-hover titles and a link to the book's homepage) that represent my skills. Of course this isn't just for me, anyone can create their own &lt;a href=&quot;http://fluid-cv.appspot.com&quot;&gt;FluidCV&lt;/a&gt; by following the instructions on the main page.&lt;/p&gt;
&lt;p&gt;&lt;strike&gt;One note, I haven't yet added the ability to add these tags in the FluidCV edit pages; hopefully I'll have time to do that this weekend before the competition deadline.&lt;/strike&gt; The edit page now has a nice autocompleting form for adding skills! Take a look at &lt;a href=&quot;http://fluid-cv.appspot.com/gridaphobe&quot;&gt;my FluidCV&lt;/a&gt; for an idea of what the end result will look like.&lt;/p&gt;
&lt;p&gt;Update: Some technical details for those interested.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FluidCV is written in python and runs on Google App Engine.&lt;/li&gt;
&lt;li&gt;There is &lt;strong&gt;no&lt;/strong&gt; local datastore. Everything except for the HTML layout comes from Fluidinfo.&lt;/li&gt;
&lt;li&gt;There's no reason the layout can't be stored in Fluidinfo. This is actually how I would implement user-customizable layouts if/when people start to use FluidCV.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I used the following tags from the O'Reilly data:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;oreilly.com/title&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;oreilly.com/homepage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;oreilly.com/cover-small&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you navigate to &lt;a href=&quot;http://fluid-cv.appspot.com/gridaphobe&quot; class=&quot;uri&quot;&gt;http://fluid-cv.appspot.com/gridaphobe&lt;/a&gt;, FluidCV executes the following query to find my skills.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;has gridaphobe/skill and has oreilly.com/title&lt;/code&gt;&lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then FluidCV grabs the aforementioned tags and inserts them into the HTML layout.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's actually really simple, although the skill editing page is a bit more complicated.&lt;/p&gt;
&lt;p&gt;I used the &lt;a href=&quot;http://loopj.com/jquery-tokeninput/&quot;&gt;jQuery Token Input library&lt;/a&gt; to make a nice autocomplete form for adding skills (i.e. you type &amp;quot;Python&amp;quot; and it gives you a list of all books that have Python in the title) and a simple &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; call to populate the list of all books once the page is loaded. The autocomplete form gives me a list of Object &lt;a href=&quot;http://en.wikipedia.org/wiki/Uuid&quot;&gt;UUIDs&lt;/a&gt; corresponding to the books the user chose, which I can then tag with &lt;code&gt;username/skill&lt;/code&gt;.&lt;/p&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;I could just use &lt;code&gt;has gridaphobe/skill&lt;/code&gt; but I could potentially be tagging objects other than O'Reilly books with &lt;code&gt;gridaphobe/skill&lt;/code&gt;.&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</content></entry><entry><title>3252 Minutes in Fluidinfo</title><link href="http://eseidel.org/posts/3252-minutes-in-fluidinfo" /><published>2011-03-27T19:56:33Z</published><updated>2011-03-27T19:56:33Z</updated><id>tag:gridaphobe.blog,2012:3252-minutes-in-fluidinfo</id><content type="html">&lt;p&gt;Over the past couple weeks I've been experimenting with a Python script that crawls &lt;a href=&quot;http://fluidinfo.com&quot;&gt;Fluidinfo&lt;/a&gt;. If you're not familiar with Fluidinfo, read my &lt;a href=&quot;/blog/2011/02/fluidcv&quot;&gt;previous post&lt;/a&gt; about it, or visit their &lt;a href=&quot;http://fluidinfo.com&quot;&gt;website&lt;/a&gt;. Basically, Fluidinfo is an openly writeable metadata engine, which means that as soon as you post data to Fluidinfo, others can add to it (or even edit your data if you wish). Fluidinfo accomplishes this with a simple Objects and Tags metaphor, in which Objects are anonymous, their meaning coming solely from the Tags that users add. This is a very social data model (they call it the &amp;quot;Database with the Heart of a Wiki&amp;quot;), so I wanted to see how users of Fluidinfo are connected through the objects they tag.&lt;/p&gt;
&lt;p&gt;To investigate this, I wrote a little Python script (available at &lt;a href=&quot;https://gist.github.com/889274&quot;&gt;GitHub&lt;/a&gt;) to crawl Fluidinfo and find out how users are connected. Specifically, it counts the number of Objects connecting any two users. In this case I was not concerned with how many Tags any user may have placed on an Object, just that they placed at least one. After working out a few bugs and revising the script to use five threads instead of just one, I have the results of 3252 Minutes, or 2.25 Days in Fluidinfo.&lt;/p&gt;
&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;
&lt;p&gt;I ran the resulting Graphviz dot-file through OmniGraffle using a Force-Directed layout, and got the following graph (you may want to open it in a separate tab, it's pretty big).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/img/fluidinfo_users_graffle.svg&quot;&gt;&lt;img class=&quot;post&quot;
title=&quot;OmniGraffle Result&quot; src=&quot;/img/fluidinfo_users_graffle.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It looks kinda chaotic doesn't it? The first important note is that the connection lines are color-coded based on how many Objects are connecting the two users. Black indicates less than 10 objects, blue indicates between 10 and 25, green between 25 and 50, yellow between 50 and 100, and red indicates over 100 connecting objects.&lt;/p&gt;
&lt;p&gt;Now let's take a look at the structure of the graph. Right in the middle of the chaos, we can see two users, &lt;em&gt;terrycojones&lt;/em&gt; and &lt;em&gt;njr&lt;/em&gt;, with connections to almost every surrounding user. Terrycojones is the CEO of Fluidinfo and njr blogs extensively on Fluidinfo and how to classify objects at &lt;a href=&quot;http://blog.abouttag.com&quot;&gt;AboutTag&lt;/a&gt;, so it seems reasonable that they would be focal points of the Fluidinfo web. I'm actually a little surprised that the graph isn't more centered around njr; he must have his own bot running around Fluidinfo, because most Objects I look at have some sort of &lt;em&gt;njr&lt;/em&gt; tag (&amp;quot;njr/index&amp;quot; is a popular one if I recall correctly). Furthermore, there are three fairly distinct clusters of users around terrycojones and njr. To the left there's a cluster of domain users (oreilly.com, amazon.com, books.google.com, etc.), which are all domains that relate to books. This is a good sign because it indicates that these users are choosing to tag the same objects and following a consistent About-Tag convention. Below terrycojones is a loose cluster of technology related users (ycombinator.com, twitter.com, crunchbase), and above him is a very tight cluster of ordinary users. I'm really curious to see what Objects are connecting these users, but that's not something that my crawler picked up on this run.&lt;/p&gt;
&lt;p&gt;Another interesting thing that we can see in this graph is the tagging habits of users. Most, but not all, users have a line looping back to themselves. This was actually unintended, but my crawler also picked up how many Objects each user tagged more than once. Notice that most users don't have more Objects in common with themselves than they do with other users. This would seem to indicate that the common behavior is to tag Objects socially, as opposed to creating a personal database. Of course people could be doing exactly that with one Tag per Object, in which case my crawler wouldn't have detected it. One last important note, Fluidinfo has a simple but advanced Permissions system for Tags, so it's quite possible that users are connected in ways that are not visible to the public. Of course I wouldn't be able to know if that's the case here :)&lt;/p&gt;
&lt;h2 id=&quot;thoughts&quot;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;This was a really interesting experiment for me. A few possible next steps:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Run a new crawler that will also find out &lt;em&gt;what&lt;/em&gt; Objects are connecting users.&lt;/li&gt;
&lt;li&gt;Create a webapp that runs the crawler once a week, and tracks the changes over time.&lt;/li&gt;
&lt;li&gt;Create a webapp that collects this type of data, but puts it right back in Fluidinfo, fulfilling Fluidinfo's Meta-Purpose :p&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'll also briefly list the tools I used to do this.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My old HTPC: 1.6 GHz Atom processor, 2GB RAM, running Linux Mint 10&lt;/li&gt;
&lt;li&gt;Python 2.6.6&lt;/li&gt;
&lt;li&gt;The Fluid Object Mapper (FOM)&lt;/li&gt;
&lt;li&gt;Graphviz and OmniGraffle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Again the code is available at &lt;a href=&quot;https://gist.github.com/889274&quot;&gt;GitHub&lt;/a&gt;, please let me know if you see any mistakes. I know it's a bit messy, but I thought it would be rather unscientific of me to alter the logic after the fact. I also have an SVG created by Graphviz &lt;a href=&quot;/images/fluidinfo_users_graphviz.svg&quot;&gt;here&lt;/a&gt;. I actually think it shows the structure a bit better, but I couldn't figure out how to prevent the lines from going through the users...&lt;/p&gt;</content></entry><entry><title>What is GetComponents?</title><link href="http://eseidel.org/posts/getcomponents" /><published>2011-02-27T05:00:00Z</published><updated>2011-02-27T05:00:00Z</updated><id>tag:gridaphobe.blog,2012:getcomponents</id><content type="html">&lt;p&gt;I've never written a blog post about &lt;a href=&quot;http://eseidel.org/projects/getcomponents&quot;&gt;GetComponents&lt;/a&gt;, so lets fix that. I started working on Getcomponents almost a year ago with the &lt;a href=&quot;http://cct.lsu.edu&quot;&gt;Center for Computation &amp;amp; Technology&lt;/a&gt; at Louisiana State University. Some of the main developers for the &lt;a href=&quot;http://cactuscode.org&quot;&gt;Cactus Computational Toolkit&lt;/a&gt; work at CCT, and needed a fresh way to distribute their framework. Cactus is a distributed framework, in the sense that it is composed of many smaller pieces of code that could theoretically function on their own. Add in the fact that these modules, or &amp;quot;Thorns&amp;quot;, are developed by many different people, and you can see why the standard tarball distribution doesn't make sense for Cactus.&lt;/p&gt;
&lt;p&gt;Instead, they had a clever Perl script called GetCactus that could read a file containing the URLs of all the needed thorns and checkout the source code from a variety of cvs repositories. A brilliant solution, but there were some problems.&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;The script was written in 1999, before svn was even released. The initial implementation only supported cvs, which is pretty terrible by modern standards. Svn support was easy enough to add since svn's design and syntax are nearly identical to cvs. When git came along, however, it was much more difficult to support. Git (and DVCS's in general) has a completely different design and mentality compared to cvs and svn, and while some git support was added to GetCactus, it wasn't as elegant as they would have liked.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There were some portability issues in the &amp;quot;Thornlists.&amp;quot; The files contained usernames and passwords, which had to be changed each time a user downloaded the new file. This caused confusion among users, especially the newer ones. Who wants to manually edit a file just to start downloading the code?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So they brought me in to rewrite GetCactus. We wanted an extensible, framework-agnostic tool that could retrieve components from a variety of VCS's as well as regular http downloads. So we designed the &lt;a href=&quot;http://github.com/gridaphobe/crl/wiki/Component-Retrieval-Language&quot;&gt;Component Retrieval Language&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;the-component-retrieval-language&quot;&gt;The Component Retrieval Language&lt;/h2&gt;
&lt;p&gt;The Component Retrieval Language is a Domain Specific Language that we wrote to solve this problem. It uses about 10 simple directives to identify the URL of a repository, the version control system being used, the target location on the local machine, etc. Directives are prefixed by a &lt;code&gt;!&lt;/code&gt; and variables can be declared to simplify writing the component list. CRL also allows variable expansion based on the items to be checked out so you can group a number of repositories that have similar URL structure as in the following example.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!TARGET   = $ARR
!TYPE     = svn
!AUTH_URL = https://svn.cactuscode.org/arrangements/$1/$2/trunk
!URL      = http://svn.cactuscode.org/arrangements/$1/$2/trunk
!CHECKOUT =
CactusArchive/ADM
CactusBase/Boundary
CactusBase/CartGrid3D
CactusBase/CoordBase&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is an excerpt from the component list for the &lt;a href=&quot;http://www.einsteintoolkit.org&quot;&gt;Eintstein Toolkit&lt;/a&gt;, which uses GetComponents as its means of distribution. It exhibits a couple nice features of CRL, variable substitution in the URL directive, and variable definitions (recursive definitions in this case) in the TARGET directive. Earlier in the file the two lines&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!DEFINE ROOT = Cactus
!DEFINE ARR  = $ROOT/arrangements&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;define the target &lt;code&gt;$ARR&lt;/code&gt; in terms of the &lt;code&gt;$ROOT&lt;/code&gt; variable, which we just set to &amp;quot;Cactus.&amp;quot; This allows for quite a bit of flexibility in writing the component lists since the variables are used globally.&lt;/p&gt;
&lt;p&gt;If you want to know more about the Component Retrieval Language, I'd suggest looking at the &lt;a href=&quot;http://github.com/gridaphobe/crl/wiki/Component-Retrieval-Language&quot;&gt;wiki&lt;/a&gt;, or the &lt;a href=&quot;/download/crl-tg10.pdf&quot;&gt;paper&lt;/a&gt; we published on it.&lt;/p&gt;
&lt;h2 id=&quot;getcomponents&quot;&gt;GetComponents&lt;/h2&gt;
&lt;p&gt;GetComponents is my implementation of the Component Retrieval Language. It is written in Perl (my first experience with the language) and currently supports cvs, svn, git, mercurial, darcs, and http downloads.&lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; GetComponents was actually my first real programming project outside of homework for school, so I'm quite happy with the result. It took a while to get to a &amp;quot;complete&amp;quot; state,&lt;a href=&quot;#fn2&quot; class=&quot;footnoteRef&quot; id=&quot;fnref2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; but it has been a great experience! I can't stress enough how much of a difference it makes to me as a programmer to know that people are actually using (and enjoying!) my software, which unfortunately is not something that most college students get to experience.&lt;/p&gt;
&lt;p&gt;Back to GetComponents' functionality... It has some &amp;quot;standard&amp;quot; features like a verbose mode that prints each command being executed and the output, a debug mode that shows what would have been done in a real run, and a status and diff mode. These are a nice addition in my opinion, they inform the user of modifications and incoming updates, or a diff, for all the repositories that GetComponents is tracking. This is really helpful because if you are working with many repositories, it's easy to forget to commit one of them, which could break the code for everyone except yourself. GetComponents also has a parallel mode for checking out up to 4 components at a time; in my experience it results in a 50-70% speed boost over sequential checkouts!&lt;/p&gt;
&lt;p&gt;I think that's enough for now, but as a final note I'd like to point out that GetComponents and CRL can be used for more than just managing code. If you have any large group of resources (documents, pictures, code, music, etc.) stored online somewhere, whether in a versioned repository or just on a server that you can access via http/ftp, you can use GetComponents to simplify retrieving your stuff. One example is publications. Many scientific papers are written in LaTeX and stored in separate repositories. If you're a prolific author, it might be tedious getting a copy of all your papers on your nice new computer. GetComponents makes that easy! All you have to do is maintain a single component list with all your papers, and suddenly you only have to download &lt;em&gt;one&lt;/em&gt; file and issue &lt;em&gt;one&lt;/em&gt; terminal command.&lt;/p&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;Note: CRL is essentially system agnostic. The only distinctions it makes are between centralized and decentralized systems.&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn2&quot;&gt;&lt;p&gt;I started working on GetComponents last February and it replaced the GetCactus script a couple months later, but I only felt comfortable tagging a 1.0 release a couple months ago.&lt;a href=&quot;#fnref2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</content></entry><entry><title>FluidCV Pre-Alpha</title><link href="http://eseidel.org/posts/fluidcv-pre-alpha" /><published>2011-02-17T05:00:00Z</published><updated>2011-02-17T05:00:00Z</updated><id>tag:gridaphobe.blog,2012:fluidcv-pre-alpha</id><content type="html">&lt;p&gt;Quick update on the status of &lt;a href=&quot;http://fluid-cv.appspot.com&quot;&gt;FluidCV&lt;/a&gt;. I've added some documenation to the home page, and opened the app to anyone with a &lt;a href=&quot;http://fluidinfo.com&quot;&gt;Fluidinfo&lt;/a&gt; account. The resumé creation process is not very user-friendly right now (it basically requires major terminal work...), but I'm going to add a web-interface as soon as I have time. I also plan to add the ability to use custom html/css layouts eventually, but that will be further down the road. So for those of you who are comfortable with command-line utilities, try it and tell me what you think!&lt;/p&gt;
&lt;p&gt;For more info on FluidCV, check out the &lt;a href=&quot;http://fluid-cv.appspot.com&quot;&gt;website&lt;/a&gt; or my original &lt;a href=&quot;/blog/2011/02/fluidcv/&quot;&gt;post&lt;/a&gt; about it.&lt;/p&gt;</content></entry><entry><title>MatLab...</title><link href="http://eseidel.org/posts/matlab" /><published>2011-02-12T05:00:00Z</published><updated>2011-02-12T05:00:00Z</updated><id>tag:gridaphobe.blog,2012:matlab</id><content type="html">&lt;p&gt;I have a nice laptop, a 2.66GHz, 4GB Unibody MacBook Pro. I love it, and it loves me for the most part. It does not, however, like &lt;a href=&quot;http://www.mathworks.com/products/matlab/&quot;&gt;MatLab&lt;/a&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;post&quot; title=&quot;MatLab&quot; src=&quot;/img/matlab.png&quot; /&gt;&lt;/p&gt;</content></entry><entry><title>FluidCV</title><link href="http://eseidel.org/posts/fluidcv" /><published>2011-02-11T05:00:00Z</published><updated>2011-02-11T05:00:00Z</updated><id>tag:gridaphobe.blog,2012:fluidcv</id><content type="html">&lt;p&gt;I'm starting a new project called &lt;a href=&quot;http://fluid-cv.appspot.com&quot;&gt;FluidCV&lt;/a&gt;. It will be a new way to create a resumé/cv, using &lt;a href=&quot;http://fluidinfo.com&quot;&gt;Fluidinfo&lt;/a&gt; as the backend storage. Fluidinfo is an open, social database, where objects are readable and writeable by everyone. Objects are essentially anonymous, except for a unique &lt;em&gt;about&lt;/em&gt; tag. Users can tag objects with any tag they want, and have full control over who can read or write to their tags. Fluidinfo also provides a simple query language for finding objects. Using this language, I could for example search for a tech blog post that I really like with&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gridaphobe/rating &amp;gt; 7 and gridaphobe/post/category=&amp;quot;technology&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This might return an object with the about tag &lt;a href=&quot;http://lifehac.kr/g1KtPo&quot; class=&quot;uri&quot;&gt;http://lifehac.kr/g1KtPo&lt;/a&gt;, which links to a nice post about a new Gmail client for Mac OS X.&lt;/p&gt;
&lt;p&gt;Now, if I'm going to tag blog posts that I like, why not tag places I went to school or at which I worked? I used to be a Genius at &lt;a href=&quot;http://www.apple.com&quot;&gt;Apple&lt;/a&gt;, so I tagged the object with about tag &lt;a href=&quot;http://www.apple.com&quot; class=&quot;uri&quot;&gt;http://www.apple.com&lt;/a&gt; with the tags&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gridaphobe/employer&lt;/li&gt;
&lt;li&gt;gridaphobe/company = &amp;quot;Apple Inc.&amp;quot;&lt;/li&gt;
&lt;li&gt;gridaphobe/title = &amp;quot;Genius&amp;quot;&lt;/li&gt;
&lt;li&gt;gridaphobe/start-date = &amp;quot;2008-02-15&amp;quot;&lt;/li&gt;
&lt;li&gt;gridaphobe/end-date = &amp;quot;2009-07-15&amp;quot;&lt;/li&gt;
&lt;li&gt;gridaphobe/functions = ['Diagnosed and resolved customer issues with full range of Apple products.', 'Hired as Specialist, promoted to Genius in Sep. 2008.']&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm currently a student at &lt;a href=&quot;http://ccny.cuny.edu&quot;&gt;The City College of New York&lt;/a&gt;, so I also tagged the object with about tag &lt;a href=&quot;http://ccny.cuny.edu&quot; class=&quot;uri&quot;&gt;http://ccny.cuny.edu&lt;/a&gt; with the tags&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gridaphobe/attended&lt;/li&gt;
&lt;li&gt;gridaphobe/school-name = &amp;quot;The City College of New York&amp;quot;&lt;/li&gt;
&lt;li&gt;gridaphobe/school-location = &amp;quot;New York, NY&amp;quot;&lt;/li&gt;
&lt;li&gt;gridaphobe/major = &amp;quot;Computer Science&amp;quot;&lt;/li&gt;
&lt;li&gt;gridaphobe/gpa = 3.95&lt;/li&gt;
&lt;li&gt;gridaphobe/start-date = &amp;quot;2009-08-28&amp;quot;&lt;/li&gt;
&lt;li&gt;gridaphobe/end-date = &amp;quot;2012-05-25&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now I have some nice metadata about where I worked and went to school, but I'm missing the most important part of a resume, my contact info! The solution is simple; every Fluidinfo user has a special object representing them. It has the about tag 'Object for the user named $user.' So I tagged my user object with&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gridaphobe/given-name = &amp;quot;Eric&amp;quot;&lt;/li&gt;
&lt;li&gt;gridaphobe/family-name = &amp;quot;Seidel&amp;quot;&lt;/li&gt;
&lt;li&gt;gridaphobe/cell-phone = &amp;quot;+1 225 276 2830&amp;quot;&lt;/li&gt;
&lt;li&gt;gridaphobe/email = &amp;quot;eric@eseidel.org&amp;quot;&lt;/li&gt;
&lt;li&gt;gridaphobe/summary = &amp;quot;Seeking opportunities to further skills and experiences in research that leverage my expertise in software design and implementation, particularly in a multidisciplinary and collaborative environment.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With all the metadata in place (I've had a few internships since I worked at Apple, but this is a simple example) I wrote a simple webapp using &lt;a href=&quot;http://flask.pocoo.org&quot;&gt;Flask&lt;/a&gt;, &lt;a href=&quot;http://code.google.com/appengine/&quot;&gt;Google App Engine&lt;/a&gt;, and the fantastic &lt;a href=&quot;https://launchpad.net/fom&quot;&gt;Fluid Object Mapper&lt;/a&gt;, which grabs the metadata from Fluidinfo and places it in a nice template that I found online. It also marks up the resulting resumé using the &lt;a href=&quot;http://microformats.org/wiki/hresume&quot;&gt;hResume&lt;/a&gt; format, a microformat for writing resumé metadata.&lt;/p&gt;
&lt;p&gt;Right now &lt;a href=&quot;http://fluid-cv.appspot.com&quot;&gt;my webapp&lt;/a&gt; only shows my info, and doesn't allow me to add new info via a nice web-interface, but that will come soon. I also plan to make it work for anyone with a Fluidinfo account and the correct tags. Feel free to check out the source at &lt;a href=&quot;https://github.com/gridaphobe/fluid-cv&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</content></entry><entry><title>GeekTool + Bowtie = Awesome</title><link href="http://eseidel.org/posts/geektool-bowtie" /><published>2011-01-13T05:00:00Z</published><updated>2011-01-13T05:00:00Z</updated><id>tag:gridaphobe.blog,2012:geektool-bowtie</id><content type="html">&lt;p&gt;So today I discovered two awesome utilities for customizing a Mac desktop: &lt;a href=&quot;http://projects.tynsoe.org/en/geektool/&quot;&gt;GeekTool&lt;/a&gt; and &lt;a href=&quot;http://bowtieapp.com/&quot;&gt;Bowtie&lt;/a&gt;. GeekTool allows you to display files, images, and the output of shell scripts on your desktop. It seems to be very powerful, but I just used it to display the current date and time. Bowtie is a nice, customizable remote for iTunes that has tons of keyboard shortcuts and integrates with Last.fm. Combining those two apps with a nice wallpaper and some tweaks to my dock, I was able to make this.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;post&quot; title=&quot;Desktop&quot; src=&quot;/img/desktop-geektools.png&quot; /&gt;&lt;/p&gt;</content></entry></feed>