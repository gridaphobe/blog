# .github/workflows/update-lts.yml
name: Update Stackage LTS

on:
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'
  workflow_dispatch: # Allows manual triggering

jobs:
  update-lts:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'gridaphobe' # IMPORTANT: Replace with your GitHub username/org to prevent running on forks

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Need to fetch all history to properly compare branches for PR creation
        fetch-depth: 0 

    - name: Get current LTS from stack.yaml
      id: current_lts
      run: |
        CURRENT_LTS_STR=$(grep 'snapshot:' stack.yaml | head -n1 | awk '{print $NF}')
        CURRENT_LTS_NUM=$(echo $CURRENT_LTS_STR | sed 's/lts-//')
        echo "Current LTS string: $CURRENT_LTS_STR"
        echo "Current LTS number: $CURRENT_LTS_NUM"
        echo "lts_dir=$CURRENT_LTS_STR" >> $GITHUB_OUTPUT
        echo "lts_num=$CURRENT_LTS_NUM" >> $GITHUB_OUTPUT

    - name: Fetch latest LTS version from Stackage
      id: latest_lts
      run: |
        # Fetch the snapshots.json and extract the latest LTS version
        SNAPSHOTS_JSON=$(curl -s https://www.stackage.org/download/snapshots.json)
        LATEST_LTS_STR=$(echo "$SNAPSHOTS_JSON" | jq -r '.lts')
        
        echo "Latest LTS version: $LATEST_LTS_STR"
        
        # Extract the version number without the 'lts-' prefix for comparison
        LATEST_LTS_NUM=$(echo "$LATEST_LTS_STR" | sed 's/lts-//')
        
        echo "lts_num=$LATEST_LTS_NUM" >> $GITHUB_OUTPUT
        echo "lts_str=$LATEST_LTS_STR" >> $GITHUB_OUTPUT

    - name: Compare versions and update if newer
      id: update_check
      run: |
        echo "Current LTS: ${{ steps.current_lts.outputs.lts_num }}"
        echo "Latest LTS: ${{ steps.latest_lts.outputs.lts_num }}"
        # Use sort -V for version comparison
        LATEST_IS_NEWER=$(echo -e "${{ steps.current_lts.outputs.lts_num }}\n${{ steps.latest_lts.outputs.lts_num }}" | sort -V | tail -n1)
        if [[ "${LATEST_IS_NEWER}" == "${{ steps.latest_lts.outputs.lts_num }}" && "${{ steps.current_lts.outputs.lts_num }}" != "${{ steps.latest_lts.outputs.lts_num }}" ]]; then
          echo "Newer LTS available: ${{ steps.latest_lts.outputs.lts_num }}"
          echo "update_needed=true" >> $GITHUB_OUTPUT
          # Update stack.yaml
          sed -i "s|^snapshot:.*|snapshot: ${{ steps.latest_lts.outputs.lts_str }}|" stack.yaml
          cat stack.yaml # Print updated file for logs
        else
          echo "Current LTS is up-to-date or latest is not newer."
          echo "update_needed=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Pull Request if update was successful
      if: steps.update_check.outputs.update_needed == 'true'
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update Stackage LTS to ${{ steps.latest_lts.outputs.lts_num }}"
        branch: "update-lts-${{ steps.latest_lts.outputs.lts_num }}"
        delete-branch: true
        title: "Update Stackage LTS to ${{ steps.latest_lts.outputs.lts_num }}"
        body: |
          Automated update of Stackage LTS snapshot from `${{ steps.current_lts.outputs.lts_num }}` to `${{ steps.latest_lts.outputs.lts_num }}`.

          This PR was generated automatically by the `update-lts` workflow.
          The build was successful with the new LTS. CI checks on this PR will further validate the changes.
        labels: dependencies, automation
        # assignees: your-github-username # Optional
        # reviewers: your-github-username # Optional

    - name: Notify if no update needed
      if: steps.update_check.outputs.update_needed == 'false'
      run: echo "No LTS update was needed."
